<?php

namespace Impiger\{Module}\Http\Controllers;

use Impiger\Base\Http\Responses\BaseHttpResponse;
use Impiger\Base\Events\CreatedContentEvent;
use Impiger\Base\Events\UpdatedContentEvent;
use Impiger\{Module}\Http\Requests\{Name}Request;
use Impiger\{Module}\Repositories\Interfaces\{Name}Interface;
use Impiger\{Module}\Tables\{Name}Table;
use Exception;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Schema;
use App\Utils\CrudHelper;

class {Name}PublicController extends Controller
{
    /**
     * @var {Name}Interface
     */
    protected ${+name}Repository;

    /**
     * @param {Name}Interface ${+name}Repository
     */
    public function __construct({Name}Interface ${+name}Repository)
    {
        $this->{+name}Repository = ${+name}Repository;
    }

    /**
     * @param {Name}Table $table
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @throws \Throwable
     */
    public function index({Name}Table $table)
    {
        return $table->setOptions(['shortcode' => true])->renderTable();
    }

    /**
     * @param {Name}Request $request
     * @param BaseHttpResponse $response
     * @return BaseHttpResponse
     * @throws \Throwable
     */
    public function postData({Name}Request $request, BaseHttpResponse $response)
    {
        try {
            ${+name} = $this->{+name}Repository->getModel();
            $table = ${+name}->getTable();
            if(Schema::hasColumn($table,'is_enabled')){
                ${+name}->fillable(array_merge(${+name}->getFillable(),["is_enabled"]));
                ${+name}->is_enabled = 0;
            }
            ${+name}->fill($request->input());
            $this->{+name}Repository->createOrUpdate(${+name});
            {subform_create_script}
            CrudHelper::uploadFiles($request, ${+name});
            event(new CreatedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${+name}));
            #{callEmailMethodOnCreate}
            return $response
                    ->setPreviousUrl(url('/form-response?form={++title}'))
                    ->setMessage(trans('core/base::notices.create_success_message'));
        } catch (Exception $exception) {
            info($exception->getMessage());
            return $response
                ->setError()
                ->setMessage(trans('plugins/{+name}::failed_msg'));
        }
    }

    /**
     * @param {Name}Request $request
     * @param BaseHttpResponse $response
     * @return BaseHttpResponse
     * @throws \Throwable
     */
    public function updateData($id, {Name}Request $request, BaseHttpResponse $response)
    {
        try {
            ${+name} = $this->{+name}Repository->findOrFail($id);
            {subform_update_script}
            ${+name}->fill($request->input());
            $this->{+name}Repository->createOrUpdate(${+name});
            event(new UpdatedContentEvent({NAME}_MODULE_SCREEN_NAME, $request, ${+name}));
            #{callEmailMethodOnCreate}
            return $response
                    ->setPreviousUrl(url('/form-response?form={++title}'))
                    ->setMessage(trans('core/base::notices.create_success_message'));
        } catch (Exception $exception) {
            info($exception->getMessage());
            return $response
                ->setError()
                ->setMessage(trans('plugins/{+name}::failed_msg'));
        }
    }
}
